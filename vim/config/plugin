source $DOTFILES/vim/.bundle/vim-plug/plug.vim

call plug#begin('~/.vim/plugged')
  Plug 'scrooloose/nerdtree'
  nmap <C-n> :NERDTreeToggle<CR>
  nnoremap <silent> <Leader>t :NERDTreeFocus<CR>
  nnoremap <silent> <Leader>f :NERDTreeFind<CR>
  let NERDTreeIgnore =['\.swp$']
  let NERDTreeQuitOnOpen=1

  Plug 'tpope/vim-surround'

  Plug 'scrooloose/nerdcommenter'
  vnoremap <leader>/ :call NERDComment(0,"toggle")<CR>
  nnoremap <leader>/ :call NERDComment(0,"toggle")<CR>
  let g:NERDSpaceDelims = 1
  let g:NERDCompactSexyComs = 1
  let g:NERDDefaultAlign = 'left'

  Plug 'Yggdroot/indentLine'
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
  let g:indent_guides_start_level = 2

" For ruby development
  Plug 'vim-ruby/vim-ruby'
  Plug 'ngmy/vim-rubocop'
  Plug 'kana/vim-textobj-user'
  Plug 'rhysd/vim-textobj-ruby'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-bundler'
  Plug 'tpope/vim-rake'

  Plug 'vim-airline/vim-airline'
  Plug 'morhetz/gruvbox'
  let g:airline_powerline_fonts = 1
  set laststatus=2

  Plug 'vim-syntastic/syntastic'

  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0

  Plug 'tpope/vim-fugitive'
  Plug 'talek/obvious-resize'
  let g:obvious_resize_default = 10
  nnoremap <silent> <C-K> :<C-U>ObviousResizeUp<CR>
  nnoremap <silent> <C-J> :<C-U>ObviousResizeDown<CR>
  nnoremap <silent> <C-H> :<C-U>ObviousResizeLeft<CR>
  nnoremap <silent> <C-L> :<C-U>ObviousResizeRight<CR>

  " Go
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  Plug 'sebdah/vim-delve'

  " Coc
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  inoremap <silent><expr> <C-N> coc#refresh()
  autocmd CursorHold * silent call CocActionAsync('highlight')
  nmap <leader>ac  <Plug>(coc-codeaction)
  let g:coc_config_home = '$DOTFILES/vim/coc'
  let g:coc_global_extensions = [
        \'coc-yank',
        \'coc-pairs',
        \'coc-json',
        \'coc-yaml',
        \'coc-python',
        \'coc-java',
        \'coc-go',
        \'coc-sh',
        \'coc-solargraph',
        \'coc-highlight',
        \'coc-sql',
        \'coc-yank',
        \'coc-json'
        \]

  nmap <silent> gd <Plug>(coc-definition)
  xmap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap if <Plug>(coc-funcobj-i)
  omap af <Plug>(coc-funcobj-a) nmap <silent> <leader>rn <Plug>(coc-rename)
  nnoremap <silent> <Leader>D :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
  " noremap <silent> <Leader>p :Clap files<CR>
  " noremap <silent> <Leader>b :Clap buffers<CR>
  " noremap <silent> <Leader>g :Clap grep<CR>

  Plug 'junegunn/fzf', { 'do': ':fzf#install()'}
  Plug 'junegunn/fzf.vim'
  let g:fzf_command_prefix = 'Fzf'
  let g:fzf_buffers_jump = 1
  let g:fzf_preview_window = ['right:50%', 'ctrl-/']
  let g:fzf_history_dir = '~/.local/share/fzf-history'
  let g:fzf_layout = { 'down': '30%' }
  noremap <silent> <Leader>p :FzfFiles<CR>
  noremap <silent> <Leader>P :FzfGFiles<CR>
  noremap <silent> <Leader>b :FzfBuffers<CR>
  noremap <silent> <Leader>g :FzfRg<CR>


  Plug 'puremourning/vimspector'
  Plug 'sheerun/vim-polyglot'

call plug#end()

colorscheme gruvbox
set bg=dark
let g:gruvbox_contrast_dark = "hard"
